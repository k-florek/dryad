#!/usr/bin/env python3
#Author: Kelsey Florek
#email: kelsey.florek@slh.wisc.edu
#description: A pipeline for constructing SNP based and  core gene set reference free phylogenies


import sys,os,re
import argparse
from shutil import which
import shlex
import subprocess

if __name__ == '__main__':
    #get nextflow executable
    lib_path = os.path.abspath(os.path.dirname(__file__) + '/' + 'lib')
    dryad_path = os.path.abspath(os.path.dirname(__file__) + '/' + 'dryad.nf')
    nextflow_path = os.path.join(lib_path,'nextflow')

    #setup argparser to display help if no arguments
    class MyParser(argparse.ArgumentParser):
        def error(self, message):
            sys.stderr.write('error: %s\n' % message)
            self.print_help()
            sys.exit(2)

    #check if we are using docker or singularity
    if which('docker'):
        profile = 'docker'
    elif which('singularity'):
        profile = 'singularity'
    else:
        print('Singularity or Docker is not installed or not in found in PATH.')
        sys.exit(1)

    parser = MyParser(description='A comprehensive tree building program.')
    parser.add_argument('reads_path', type=str,help="Path to the location of the raw reads in the fastq format.")
    parser.add_argument('--core-genome','-cg',default=False, action="store_true", help="Construct a core-genome tree.")
    parser.add_argument('--snp','-s',default=False, action="store_true", help="Construct a SNP tree. Note: Requires a reference genome in fasta format (-r).")
    parser.add_argument('-ar',default=False, action="store_true", help="Detect AR mechanisms.")
    parser.add_argument('-r',metavar='<path>', type=str,help="Reference genome for SNP pipeline.")
    parser.add_argument('-t',metavar='cpus', type=int,help="Maxmium number of cpus to use, default 8.",default=8)
    parser.add_argument('-m',metavar='memory in GB', type=int,help="Maxmium number of GB of memory to use, default 16.",default=16)

    args = parser.parse_args()

    #check for reference sequence
    if args.snp and args.r == None:
        parser_dryad.print_help()
        print("Please specify a reference sequence for the SNP pipeline.")

    #build nextflow command
    selections = ""
    if args.ar:
        selections += " --ar"
    if args.core_genome:
        selections += " --cg"
    if args.snp:
        selections += f" --snp --snp_reference {args.r}"
    command = nextflow_path + ""
    command = command + f" {dryad_path} -profile {profile} -resume --reads {args.reads_path} {selections}"

    #run command using nextflow in a subprocess
    process = subprocess.Popen(shlex.split(command), stdout=subprocess.PIPE)
    output, error = process.communicate()
    if output:
        print(output.decode("utf-8",'ignore'))
    if error:
        print(error.decode("utf-8",'ignore'))
